import * as Types from '../types/encryption.js';
/**
 * concatenateArrayBuffers
 * @param buffer1 random iv as ArrayBuffer
 * @param buffer2 encrypted data as ArrayBuffer
 * @returns concatenated ArrayBuffer with random iv and encrypted data
 * r
 */
declare function concatenateArrayBuffers(buffer1: ArrayBuffer, buffer2: ArrayBuffer): ArrayBufferLike;
/**
 * separateArrayBuffer
 * @param combinedBuffer concatenated ArrayBuffer with random iv and encrypted data
 * @returns object containing separated random iv and encrypted data as ArrayBuffers
 */
declare function separateArrayBuffer(combinedBuffer: ArrayBuffer): {
    prependUint8Array: Uint8Array;
    originalArrayBuffer: ArrayBuffer;
};
/**
 * bufferToBase64
 * @param buf AES encryption key as raw ArrayBuffer
 * @returns AES encryption key as base64 string
 */
declare function bufferToBase64(buf: ArrayBuffer): string;
/**
 * encryptFileWithAES
 * @param params data (to be encrypted) as ArrayBuffer
 * @returns object of raw AES key as Base64 and encrypted data as ArrayBuffer
 */
export declare function encryptDataWithAES(params: Types.EncryptDataWithAESProps): Promise<{
    rawEncryptedKeyAsBase64: string;
    combinedArrayBuffer: ArrayBufferLike;
}>;
/**
 * encryptAESKeywithRSA
 * @param params AES key as Base64 string
 * @returns RSA encrypted AES key as Uint8Array
 */
export declare function encryptAESKeywithRSA(params: Types.EncryptAESKeywithRSAProps): Promise<Uint8Array>;
export declare function decryptAESKeywithRSA(params: Types.DecryptAESKeywithRSAProps): Promise<string>;
/**
 * base64ToBuffer
 * @param base64 raw AES key as base64 string
 * @returns raw AES key as ArrayBuffer
 */
declare function base64ToBuffer(base64: string): ArrayBufferLike;
/**
 * decryptFileWithAES
 * @param params object of encrypted data as ArrayBuffer and raw AES key as base64 string
 * @returns decrypted data as ArrayBuffer
 */
export declare function decryptDataWithAES(params: Types.DecryptDataWithAESProps): Promise<ArrayBuffer>;
export declare const ArweaveKit: import("../types/plugin.js").ArweaveKitType<{
    concatenateArrayBuffers: typeof concatenateArrayBuffers;
    separateArrayBuffer: typeof separateArrayBuffer;
    bufferToBase64: typeof bufferToBase64;
    encryptDataWithAES: typeof encryptDataWithAES;
    encryptAESKeywithRSA: typeof encryptAESKeywithRSA;
    decryptAESKeywithRSA: typeof decryptAESKeywithRSA;
    base64ToBuffer: typeof base64ToBuffer;
    decryptDataWithAES: typeof decryptDataWithAES;
}>;
export {};
